import functools
import logging
from collections.abc import AsyncIterable, Awaitable
from typing import Any, Callable, Union

from fastapi import FastAPI, APIRouter
from httpx import stream
from sse_starlette import EventSourceResponse
from starlette.requests import Request
from starlette.responses import Response, JSONResponse

from aduib_rpc.server.app.rpc.jsonrpc_app import ServerContentBuilder
from aduib_rpc.server.context import ServerContext
from aduib_rpc.server.request_handlers import RequestHandler
from aduib_rpc.utils.constant import DEFAULT_RPC_PATH, DEFAULT_STREAM_KEY

logger = logging.getLogger(__name__)

class AduibRpcRestFastAPIApp:
    def __init__(self,
                 request_handler: RequestHandler,
                 context_builder: ServerContentBuilder | None = None
                    ):
        """Initializes the AduibRpcRestFastAPIApp.
        Args:
            request_handler (RequestHandler): The request handler to process incoming requests.
            context_builder (ServerContentBuilder | None): Optional context builder for request processing.
        """
        self.request_handler = request_handler
        self.context_builder = context_builder

    def build(self,
              rpc_path: str=DEFAULT_RPC_PATH,
              **kwargs: Any,
              ) -> FastAPI:
        """Builds and returns the FastAPI application with the necessary routes.
        Args:
            rpc_path (str): The path for the RPC endpoint. Defaults to '/'.
            **kwargs: Additional keyword arguments.
        Returns:
            FastAPI: The configured FastAPI application.
        """
        app = FastAPI(**kwargs)
        router = APIRouter()
        for (route, handler) in self.routes().items():
            router.add_api_route(
                f'{rpc_path}{route[0]}', handler, methods=[route[1]]
            )
        app.include_router(router)
        return app

    def routes(self) -> dict[tuple[str, str], Callable[[Request], Any]]:
        """Defines the routes for the FastAPI application.
        Returns:
            dict[tuple[str, str], Callable[[Request], Any]]: A mapping of (method, path) to handler functions.
        """
        routes: dict[tuple[str, str], Callable[[Request], Any]] = {
            ('/v1/completions', 'POST'): functools.partial(
                self._handle_requests,self.request_handler.on_message
            ),
            ('/v1/chat/completions', 'POST'): functools.partial(
                self._handle_streaming_requests, self.request_handler.on_stream_message
            ),
            ('/v1/embeddings', 'POST'): functools.partial(
                self._handle_requests, self.request_handler.on_message
            ),
        }
        return routes

    async def _handle_requests(self,
                        method: Union[Callable[[Request,ServerContext],Awaitable[Any]],Callable[[Request,ServerContext],AsyncIterable[Any]]],
                        request: Request
                        ) -> Response:
        """Handles incoming requests and delegates to the appropriate request handler method.
        Args:
            method (Callable[[Request,ServerContext],AsyncIterable[Any]]): The request handler method to invoke.
            request (Request): The incoming FastAPI request.
        Returns:
            Response: The response generated by the request handler.
        """
        context = self.context_builder.build_context(request)
        response = await method(request, context)
        return JSONResponse(content=response)

    async def _handle_streaming_requests(self,
                        method: Union[Callable[[Request,ServerContext],Awaitable[Any]],Callable[[Request,ServerContext],AsyncIterable[Any]]],
                        request: Request
                        ) -> EventSourceResponse:
        """Handles incoming streaming requests and delegates to the appropriate request handler method.
        Args:
            method (Callable[[Request,ServerContext],AsyncIterable[Any]]): The request handler method to invoke.
            request (Request): The incoming FastAPI request.
        Returns:
            Response: The response generated by the request handler.
        """
        context = self.context_builder.build_context(request)
        async def event_generator(
            stream: AsyncIterable[Any],
        ) -> AsyncIterable[dict[str, dict[str, Any]]]:
            async for item in stream:
                yield {'data': item}
        return EventSourceResponse(
            event_generator(method(request, context))
        )

